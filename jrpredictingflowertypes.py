# -*- coding: utf-8 -*-
"""JRPredictingFlowerTypes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aOKbdQdeeTYGFDaAUiT76lpYrDo26UFa
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import sqlite3

path="/content/Iris.csv"
df_csv=pd.read_csv(path)
df_csv.head(5)

sqlite_path="/content/database.sqlite"
conn=sqlite3.connect(sqlite_path)
df_sql=pd.read_sql_query("SELECT * FROM Iris;", conn)
conn.close()

# Drop 'Id' column if it exists
if 'Id' in df_csv.columns:
    df_csv = df_csv.drop('Id', axis=1)
if 'Id' in df_sql.columns:
    df_sql = df_sql.drop('Id', axis=1)

# Combine the two DataFrames
df_combined = pd.concat([df_csv, df_sql], ignore_index=True)

# Drop duplicates
df_combined = df_combined.drop_duplicates()

# Define features and target
X = df_combined.drop('Species', axis=1)
y = df_combined['Species']

# Split the data (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# Support Vector Machine (SVM)
from sklearn.svm import SVC
svm_model = SVC()
svm_model.fit(X_train, y_train)
svm_pred = svm_model.predict(X_test)
svm_accuracy = accuracy_score(y_test, svm_pred)

# Random Forest
from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)

# K-Nearest Neighbors (KNN)
from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)
knn_pred = knn_model.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_pred)

print("Model Accuracies:")
print("Logistic Regression:", accuracy)
print("SVM:", svm_accuracy)
print("Random Forest:", rf_accuracy)
print("KNN:", knn_accuracy)